#:kivy 1.6.0
#:import SlideTransition kivy.uix.screenmanager.SlideTransition 
#:import radians math.radians
#:set COLOR_HIGHLIGHT (0.788235294, 0.643137255, 1)
#:set COLOR_BACKGROUND (0.349019608, 0.082352941, 0.658823529)
#:set COLOR_BACKGROUND_A50 (0.349019608, 0.082352941, 0.658823529, .5)
#:set COLOR_BORDER (0.643137255, 0.160784314, 1)
#:set COLOR_BORDER_A50 (0.643137255, 0.160784314, 1, .5)
#:set COLOR_HIGHLIGHT_A50 (0.788235294, 0.643137255, 1, .5)
#:set COLOR_HIGHLIGHT_A100 (0.788235294, 0.643137255, 1, 1.0)
#:set COLOR_BACKGROUND_A100 (0.349019608, 0.082352941, 0.658823529, 1.0)
#:set COLOR_BORDER_A100 (0.643137255, 0.160784314, 1, 1.0)

TestGame:

<TestGame>:
	gameworld: gameworld
	pos: root.pos
	size: root.size
	state: gameworld.state
	number_of_asteroids: gameworld.number_of_asteroids
	player_character: player_character
	GameWorld:
		id: gameworld
		player_character: player_character
		music_controller: music_controller
		asteroid_system: asteroid_system
		current_character_weapons_locked: player_character.weapons_locked
		number_of_asteroids: self.asteroid_system.number_of_asteroids
		current_health: self.player_character.current_health
		total_health: self.player_character.total_health
		gamescreenmanager: gamescreenmanager
		MusicController:
			id: music_controller
		GameView:
			entity_to_focus: root.player_character.current_character_id
			gameworld: root.gameworld
			pos: root.pos
			size: root.size
		GameMap:
			gameworld: root.gameworld
		QuadRenderer:
			system_id: 'background_renderer'
	    	render_information_from: 'position'
	    	context_information_from: 'position'
	    	image_mode: 'atlas'
	    	do_scale: True
			gameworld: root.gameworld
		QuadTreePointRenderer:
			system_id: 'quadtree_renderer'
			render_information_from: 'position'
			gameworld: root.gameworld
		GameSystem:
			system_id: 'position'
			gameworld: root.gameworld
		ProjectileSystem:
			system_id: 'projectile_system'
			gameworld: root.gameworld
		ShipSystem:
			system_id: 'ship_system'
			gameworld: root.gameworld
		PlayerCharacter:
			id: player_character
			system_id: 'player_character'
			gameworld: root.gameworld
			current_character_id: self.current_character_id
		ShipAISystem:
			system_id: 'ship_ai_system'
			gameworld: root.gameworld
		AsteroidSystem:
			id: asteroid_system
			gameworld: root.gameworld
		CymunkPhysics:
			gameworld: root.gameworld
		PhysicsRenderer:
			gameworld: root.gameworld
		PhysicsPointRenderer:
			gameworld: root.gameworld
		ParticleManager:
			gameworld: root.gameworld
		ParticleManager:
			system_id: 'point_particle_manager'
			gameworld: root.gameworld
			render_information_from: 'physics_point_renderer'
		AsteroidsLevel:
			gameworld: root.gameworld
		GameScreenManager:
			id: gamescreenmanager
			gameworld: root.gameworld
			transition: SlideTransition()
			number_of_asteroids: self.gameworld.number_of_asteroids
			weapons_locked: self.gameworld.current_character_weapons_locked
			current_health: self.gameworld.current_health
			total_health: self.gameworld.total_health
			pos: root.pos
			size: root.size

<DebugPanel>:
    Label:
        pos: root.pos
        size: root.size
        font_size: root.size[1]*.5
        halign: 'center'
        valign: 'middle'
        color: (1,1,1,1)
        text: 'FPS: ' + root.fps if root.fps != None else 'FPS:'

<GameScreenManager>:
	current: 'main_menu'
	number_of_asteroids: root.number_of_asteroids
	gameworld: root.gameworld
	weapons_locked: self.weapons_locked
	current_health: self.current_health
	total_health: self.total_health
	MainMenuScreen:
		gameworld: root.gameworld
	MainGameScreen:
		gameworld: root.gameworld
		number_of_asteroids: root.number_of_asteroids
		weapons_locked: root.weapons_locked
		current_health: root.current_health
		total_health: root.total_health
	ChooseCharacterScreen:
		gameworld: root.gameworld
	GameOverScreen:
		gameworld: root.gameworld

<MainMenuScreen>:
	BoxLayout:
		size_hint: (.5, .5)
		pos_hint: {'x':.25, 'y':.25}
		orientation: 'vertical'
		YACSButton:
			text: 'PLAY GAME'
			on_press: root.gameworld.state = 'choose_character'

<GameOverScreen>:
	BoxLayout:
		size_hint: (.4, .6)
		pos_hint: {'x':.3, 'y': .2}
		orientation: 'vertical'
		YACSLabel:
			text: 'GAME OVER'
		YACSButton:
			text: 'RESTART'
			on_press: root.gameworld.state = 'choose_character'

<CharacterInputPanel>:
	canvas:
		Color:
			rgba: COLOR_BACKGROUND_A50
		Rectangle: 
			pos: self.pos
			size: self.size
		Color:
			rgb: COLOR_BORDER
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.2, self.pos[1], self.pos[0] + self.size[0] *.2, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] + self.size[1] *.2, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.2)
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.4, self.pos[1], self.pos[0] + self.size[0] *.4, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] + self.size[1] *.4, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.4)
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.6, self.pos[1], self.pos[0] + self.size[0] *.6, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] + self.size[1] *.6, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.6)
		Line:
			width: 1.
			points: (self.pos[0] + self.size[0] *.8, self.pos[1], self.pos[0] + self.size[0] *.8, self.pos[1] + self.size[1]) 
		Line:
			width: 1.
			points: (self.pos[0], self.pos[1] +  self.size[1] *.8, self.pos[0] + self.size[0], self.pos[1] + self.size[1] *.8) 
		Color:
			rgb: COLOR_HIGHLIGHT
		Line:
			width: 2.
			points: (self.center[0], self.pos[1], self.center[0], self.pos[1] + self.size[1]) if self.current_touch == [] else (self.current_touch[0], self.pos[1], self.current_touch[0], self.pos[1] + self.size[1])
		Line:
			width: 2.
			points: (self.pos[0], self.size[1] *.33, self.pos[0] + self.size[0], self.size[1] *.33) if self.current_touch == [] else (self.pos[0], self.current_touch[1], self.pos[0] + self.size[0], self.current_touch[1])
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'

<YACSLabelNoBox>:
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	shorten: True
	font_size: 16

<YACSLabel>:
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	shorten: True
	font_size: 16
	canvas.before:
		Color:
			rgba: COLOR_BACKGROUND_A50
		Rectangle:
			size: root.size
			pos: root.pos
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'

<YACSButtonCircle>:
	background_normal: 'assets/empty_pixel.png'
	background_down: 'assets/empty_pixel.png'
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	color: COLOR_BORDER if self.state == 'normal' else COLOR_HIGHLIGHT
	canvas.before:
		Color:
			rgba: COLOR_BACKGROUND_A50 if self.state == 'normal' else COLOR_HIGHLIGHT_A50
		Ellipse:
			size: root.size
			pos: root.pos
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			ellipse: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'
			close: True

<YACSButton>:
	background_normal: 'assets/empty_pixel.png'
	background_down: 'assets/empty_pixel.png'
	font_name: 'assets/fonts/Aldrich-Regular.ttf'
	color: COLOR_BORDER if self.state == 'normal' else COLOR_HIGHLIGHT
	canvas.before:
		Color:
			rgba: COLOR_BACKGROUND_A50
		Rectangle:
			size: root.size
			pos: root.pos
		Color: 
			rgb: COLOR_BORDER
		Line:
			width: 2.
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			joint: 'bevel'

<MainGameScreen>:
	gameworld: self.gameworld
	number_of_asteroids: self.number_of_asteroids
	fire_button: fire_button
	weapons_locked: self.weapons_locked
	current_health: self.current_health
	total_health: self.total_health
	FloatLayout:
		size: root.size
		pos: root.pos
		YACSLabel:
			pos_hint: {'x': .4, 'y': .05}
			text: 'ASTEROIDS: ' + str(root.number_of_asteroids) if not root.gameworld == None else '0'
			size_hint: (.2, .05)
			font_size: self.size[1]*.5
		YACSButtonCircle:
			id: fire_button
			weapons_locked: root.weapons_locked
			state: 'down' if self.weapons_locked else 'normal'
			pos_hint: {'x': .05, 'y': .05}
			size_hint: (None, None)
			size: (.15*root.width, .15*root.width)
			text: 'FIRE'
			font_size: 16
			on_state: root.gameworld.systems['player_character'].spawn_projectile(self.state)
		ToggleButton:
			pos_hint: {'x': .05, 'y': .075 + root.fire_button.size[1]/root.height}
			size_hint: (.15, .05)
			text: 'Toggle Weapon'
			on_press: root.toggle_weapons(self.state)
		CharacterInputPanel:
			gameworld: root.gameworld
			size_hint: (.20, .3)
			pos_hint: {'x': .775, 'y': .025}
		DebugPanel:
			pos: root.size[0] * .5, 0
			size: (25, 25)
			size_hint: (None, None)
		HealthBar:
			current_health: root.current_health
			total_health: root.total_health
			pos: 10, root.size[1] * .9
			size: root.size[0] * .2, root.size[1] * .10
			size_hint: (None, None)

<ChooseCharacterScreen>:
	gameworld: self.gameworld
	choose_character: choose_character
	current_ship: choose_character.current_ship
	FloatLayout:
		pos: root.pos
		size: root.size
		YACSLabel:
			pos_hint: {'x': .3, 'y':.85}
			size_hint: (.4, .1)
			text: 'Choose Your Ship:'
		ChooseCharacterWidget:
			id: choose_character
			gameworld: root.gameworld
			pos_hint: {'x': .2, 'y':.2}
			size_hint: (.6, .6)
			center: root.center
			size: root.size[0]*.6, root.size[1]*.6
		YACSButton:
			pos_hint: {'x': .3, 'y': .05}
			size_hint: (.4, .1)
			text: 'Play Game'
			on_press: root.gameworld.parent.start_round(root.current_ship)

<StatBox>:
	stat_name: self.stat_name
	stat_value: self.stat_value
	orientation: 'horizontal'
	YACSLabelNoBox:
		text: root.stat_name
		size_hint: (.5, 1.0)
		color: COLOR_HIGHLIGHT_A100
	YACSLabelNoBox:
		text: root.stat_value
		size_hint: (.5, 1.0)
		color: COLOR_BORDER_A100

<HealthBar>:
	current_health: root.current_health
	total_health: root.total_health
	health_percentage: self.health_percentage
	orientation: 'vertical'
	YACSLabelNoBox:
		text: 'Current Health: '
		size_hint: (1.0, .3)
	Widget:
		size_hint: (1.0, .5)
		canvas:
			Color:
				rgba: COLOR_BACKGROUND_A50
			Rectangle: 
				pos: self.pos
				size: self.size
			Color:
				rgba: COLOR_HIGHLIGHT_A50
			Rectangle:
				pos: self.pos
				size: ((root.health_percentage)*self.size[0], self.size[1])
			Color:
				rgba: COLOR_BORDER_A50
			Line:
				width: 2.
				rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
				joint: 'bevel'


<ChooseCharacterWidget>:
	pos: root.pos
	size: root.size
	canvas:
		Color:
			rgb: COLOR_BACKGROUND
		Rectangle:
			pos: self.pos
			size: self.size
		Color:
			rgb: COLOR_BORDER
		Line:
			rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1])
			width: 2.
	BoxLayout: 
		size: root.size
		pos: root.pos
		orientation: 'vertical'
		YACSLabelNoBox:
			text: 'Current Ship: ' + root.ship_dict['name'] if root.ship_dict else 'Current Ship: None'
			size_hint: (.8, .2)
			pos_hint: {'x': .1, 'y': .8}
		Image:
			size_hint: (None, None)
			pos_hint: {'x': .5 - self.size[0]/2./root.size[0]}
			source: root.ship_dict['texture'] if root.ship_dict else None
		BoxLayout:
			orientation: 'horizontal'
			size_hint: (.8, .2)
			pos_hint: {'x': .1}
			YACSButton:
				text: 'Prev'
				on_press: root.get_prev_ship()
				size_hint: (.5, 1.0)
			YACSButton:
				text: 'Next'
				size_hint: (.5, 1.0)
				on_press: root.get_next_ship()
		BoxLayout:
			orientation: 'horizontal'
			size_hint: (.8, .5)
			pos_hint: {'x': .1}
			BoxLayout:
				orientation: 'vertical'
				size_hint: (.5, 1.)
				StatBox:
					stat_name: 'health'
					stat_value: str(root.ship_dict['health']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'mass'
					stat_value: str(root.ship_dict['mass']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'weapons'
					stat_value: str(root.ship_dict['num_weapons']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'caliber'
					stat_value: str(root.ship_dict['caliber']) if root.ship_dict else 'Default'
			BoxLayout:
				orientation: 'vertical'
				size_hint: (.5, 1.)
				StatBox:
					stat_name: 'max speed'
					stat_value: str(root.ship_dict['max_speed']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'turn speed'
					stat_value: str(root.ship_dict['max_turn_speed']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'accel'
					stat_value: str(root.ship_dict['accel']) if root.ship_dict else 'Default'
				StatBox:
					stat_name: 'turn accel'
					stat_value: str(root.ship_dict['angular_accel']) if root.ship_dict else 'Default'


				

	
	



